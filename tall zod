[1mdiff --git a/src/app/api/chat/route.ts b/src/app/api/chat/route.ts[m
[1mindex a24ae9b..8a929a6 100644[m
[1m--- a/src/app/api/chat/route.ts[m
[1m+++ b/src/app/api/chat/route.ts[m
[36m@@ -7,6 +7,50 @@[m [mimport prisma from '../../../lib/prisma'; // 导入我们的 Prisma Client[m
 // 移除 Edge Runtime 配置，因为 Prisma 需要 Node.js 运行时[m
 // export const runtime = 'edge';[m
 [m
[32m+[m[32mimport { NextRequest, NextResponse } from 'next/server';[m
[32m+[m[32m// ... other imports[m
[32m+[m
[32m+[m[32m// GET function to fetch chat history[m
[32m+[m[32mexport async function GET(req: NextRequest) {[m
[32m+[m[32m  try {[m
[32m+[m[32m    const chatId = req.nextUrl.searchParams.get('chatId');[m
[32m+[m
[32m+[m[32m    if (!chatId) {[m
[32m+[m[32m      // 如果没有 chatId，可以返回一个空数组或最新的一个会话[m
[32m+[m[32m      // 这里我们返回最新的会话[m
[32m+[m[32m      const latestChat = await prisma.chatSession.findFirst({[m
[32m+[m[32m        orderBy: { updatedAt: 'desc' },[m
[32m+[m[32m        include: { messages: { orderBy: { createdAt: 'asc' } } },[m
[32m+[m[32m      });[m
[32m+[m
[32m+[m[32m      if (!latestChat) {[m
[32m+[m[32m        return NextResponse.json({ messages: [] });[m
[32m+[m[32m      }[m
[32m+[m[32m      return NextResponse.json(latestChat);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    const chatSession = await prisma.chatSession.findUnique({[m
[32m+[m[32m      where: { id: chatId },[m
[32m+[m[32m      include: {[m
[32m+[m[32m        messages: {[m
[32m+[m[32m          orderBy: {[m
[32m+[m[32m            createdAt: 'asc',[m
[32m+[m[32m          },[m
[32m+[m[32m        },[m
[32m+[m[32m      },[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    if (!chatSession) {[m
[32m+[m[32m      return NextResponse.json({ error: 'Chat session not found' }, { status: 404 });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return NextResponse.json(chatSession);[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    console.error('Failed to fetch chat history:', error);[m
[32m+[m[32m    return NextResponse.json({ error: 'Failed to fetch chat history' }, { status: 500 });[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
 export async function POST(req: Request): Promise<Response> {[m
   try {[m
     const { messages, chatId: existingChatId }: ChatRequest = await req.json();[m
